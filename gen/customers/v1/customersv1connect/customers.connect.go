// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: customers/v1/customers.proto

package customersv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yaninyzwitty/temporal-microservice-go/gen/customers/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CustomersServiceName is the fully-qualified name of the CustomersService service.
	CustomersServiceName = "customers.v1.CustomersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CustomersServiceCreateCustomerProcedure is the fully-qualified name of the CustomersService's
	// CreateCustomer RPC.
	CustomersServiceCreateCustomerProcedure = "/customers.v1.CustomersService/CreateCustomer"
	// CustomersServiceGetCustomerProcedure is the fully-qualified name of the CustomersService's
	// GetCustomer RPC.
	CustomersServiceGetCustomerProcedure = "/customers.v1.CustomersService/GetCustomer"
	// CustomersServiceDeleteCustomerProcedure is the fully-qualified name of the CustomersService's
	// DeleteCustomer RPC.
	CustomersServiceDeleteCustomerProcedure = "/customers.v1.CustomersService/DeleteCustomer"
)

// CustomersServiceClient is a client for the customers.v1.CustomersService service.
type CustomersServiceClient interface {
	CreateCustomer(context.Context, *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error)
	GetCustomer(context.Context, *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error)
	DeleteCustomer(context.Context, *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error)
}

// NewCustomersServiceClient constructs a client for the customers.v1.CustomersService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCustomersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CustomersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	customersServiceMethods := v1.File_customers_v1_customers_proto.Services().ByName("CustomersService").Methods()
	return &customersServiceClient{
		createCustomer: connect.NewClient[v1.CreateCustomerRequest, v1.CreateCustomerResponse](
			httpClient,
			baseURL+CustomersServiceCreateCustomerProcedure,
			connect.WithSchema(customersServiceMethods.ByName("CreateCustomer")),
			connect.WithClientOptions(opts...),
		),
		getCustomer: connect.NewClient[v1.GetCustomerRequest, v1.GetCustomerResponse](
			httpClient,
			baseURL+CustomersServiceGetCustomerProcedure,
			connect.WithSchema(customersServiceMethods.ByName("GetCustomer")),
			connect.WithClientOptions(opts...),
		),
		deleteCustomer: connect.NewClient[v1.DeleteCustomerRequest, v1.DeleteCustomerResponse](
			httpClient,
			baseURL+CustomersServiceDeleteCustomerProcedure,
			connect.WithSchema(customersServiceMethods.ByName("DeleteCustomer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// customersServiceClient implements CustomersServiceClient.
type customersServiceClient struct {
	createCustomer *connect.Client[v1.CreateCustomerRequest, v1.CreateCustomerResponse]
	getCustomer    *connect.Client[v1.GetCustomerRequest, v1.GetCustomerResponse]
	deleteCustomer *connect.Client[v1.DeleteCustomerRequest, v1.DeleteCustomerResponse]
}

// CreateCustomer calls customers.v1.CustomersService.CreateCustomer.
func (c *customersServiceClient) CreateCustomer(ctx context.Context, req *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error) {
	return c.createCustomer.CallUnary(ctx, req)
}

// GetCustomer calls customers.v1.CustomersService.GetCustomer.
func (c *customersServiceClient) GetCustomer(ctx context.Context, req *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error) {
	return c.getCustomer.CallUnary(ctx, req)
}

// DeleteCustomer calls customers.v1.CustomersService.DeleteCustomer.
func (c *customersServiceClient) DeleteCustomer(ctx context.Context, req *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error) {
	return c.deleteCustomer.CallUnary(ctx, req)
}

// CustomersServiceHandler is an implementation of the customers.v1.CustomersService service.
type CustomersServiceHandler interface {
	CreateCustomer(context.Context, *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error)
	GetCustomer(context.Context, *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error)
	DeleteCustomer(context.Context, *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error)
}

// NewCustomersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCustomersServiceHandler(svc CustomersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	customersServiceMethods := v1.File_customers_v1_customers_proto.Services().ByName("CustomersService").Methods()
	customersServiceCreateCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceCreateCustomerProcedure,
		svc.CreateCustomer,
		connect.WithSchema(customersServiceMethods.ByName("CreateCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	customersServiceGetCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceGetCustomerProcedure,
		svc.GetCustomer,
		connect.WithSchema(customersServiceMethods.ByName("GetCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	customersServiceDeleteCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceDeleteCustomerProcedure,
		svc.DeleteCustomer,
		connect.WithSchema(customersServiceMethods.ByName("DeleteCustomer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/customers.v1.CustomersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CustomersServiceCreateCustomerProcedure:
			customersServiceCreateCustomerHandler.ServeHTTP(w, r)
		case CustomersServiceGetCustomerProcedure:
			customersServiceGetCustomerHandler.ServeHTTP(w, r)
		case CustomersServiceDeleteCustomerProcedure:
			customersServiceDeleteCustomerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCustomersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCustomersServiceHandler struct{}

func (UnimplementedCustomersServiceHandler) CreateCustomer(context.Context, *connect.Request[v1.CreateCustomerRequest]) (*connect.Response[v1.CreateCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customers.v1.CustomersService.CreateCustomer is not implemented"))
}

func (UnimplementedCustomersServiceHandler) GetCustomer(context.Context, *connect.Request[v1.GetCustomerRequest]) (*connect.Response[v1.GetCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customers.v1.CustomersService.GetCustomer is not implemented"))
}

func (UnimplementedCustomersServiceHandler) DeleteCustomer(context.Context, *connect.Request[v1.DeleteCustomerRequest]) (*connect.Response[v1.DeleteCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customers.v1.CustomersService.DeleteCustomer is not implemented"))
}
